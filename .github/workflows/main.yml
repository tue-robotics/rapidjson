name: CI

on: [push, pull_request]

env:
  USE_CCACHE: 1
  CCACHE_SLOPPINESS: pch_defines,time_macros
  CCACHE_COMPRESS: 1
  CCACHE_MAXSIZE: 100M
  ARCH_FLAGS_x86: '-m32'        # #266: don't use SSE on 32-bit
  ARCH_FLAGS_x86_64: '-msse4.2' #       use SSE4.2 on 64-bit
  ARCH_FLAGS_aarch64: '-march=armv8-a'

jobs:
  ci:
    name: Build
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
          # gcc
          # - env: {CONF: release, ARCH: x86,     CXX11: ON,  CXX17: OFF, MEMBERSMAP: OFF}
          #   compiler: gcc
          - env: {CONF: release, ARCH: x86_64,  CXX11: ON,  CXX17: OFF, MEMBERSMAP: OFF}
            compiler: gcc
          # - env: {CONF: release, ARCH: aarch64, CXX11: ON,  CXX17: OFF, MEMBERSMAP: OFF}
          #   compiler: gcc
          - env: {CONF: release, ARCH: x86_64,  CXX11: ON,  CXX17: OFF, MEMBERSMAP: ON}
            compiler: gcc
          # - env: {CONF: debug,   ARCH: x86,     CXX11: OFF, CXX17: OFF, MEMBERSMAP: OFF}
          #   compiler: gcc
          - env: {CONF: debug,   ARCH: x86_64,  CXX11: OFF, CXX17: OFF, MEMBERSMAP: OFF}
            compiler: gcc
          # - env: {CONF: release, ARCH: aarch64, CXX11: OFF, CXX17: OFF, MEMBERSMAP: OFF}
          #   compiler: gcc
          # - env: {CONF: debug,   ARCH: x86,     CXX11: OFF, CXX17: ON,  MEMBERSMAP: ON, CXX_FLAGS: '-D_GLIBCXX_DEBUG'}
          #   compiler: gcc
          - env: {CONF: debug,   ARCH: x86_64,  CXX11: OFF, CXX17: ON,  MEMBERSMAP: ON, CXX_FLAGS: '-D_GLIBCXX_DEBUG'}
            compiler: gcc
          # - env: {CONF: release, ARCH: aarch64, CXX11: OFF, CXX17: ON,  MEMBERSMAP: ON,}
          #   compiler: gcc
          # clang
          # - env: {CONF: release, ARCH: x86,     CXX11: ON,  CXX17: OFF, MEMBERSMAP: ON,  CCACHE_CPP2: yes}
          #   compiler: clang
          - env: {CONF: release, ARCH: x86_64,  CXX11: ON,  CXX17: OFF, MEMBERSMAP: ON,  CCACHE_CPP2: yes}
            compiler: clang
          # - env: {CONF: debug,   ARCH: aarch64, CXX11: ON,  CXX17: OFF, MEMBERSMAP: ON,  CCACHE_CPP2: yes}
          #   compiler: clang
          - env: {CONF: release, ARCH: x86_64,  CXX11: ON,  CXX17: OFF, MEMBERSMAP: OFF, CCACHE_CPP2: yes}
            compiler: clang
          # - env: {CONF: debug,   ARCH: x86,     CXX11: OFF, CXX17: OFF, MEMBERSMAP: ON,  CCACHE_CPP2: yes}
          #   compiler: clang
          - env: {CONF: debug,   ARCH: x86_64,  CXX11: OFF, CXX17: OFF, MEMBERSMAP: ON,  CCACHE_CPP2: yes}
            compiler: clang
          # - env: {CONF: debug,   ARCH: aarch64, CXX11: OFF, CXX17: OFF, MEMBERSMAP: ON,  CCACHE_CPP2: yes}
          #   compiler: clang
          # - env: {CONF: debug,   ARCH: x86,     CXX11: OFF, CXX17: ON,  MEMBERSMAP: OFF, CCACHE_CPP2: yes}
          #   compiler: clang
          - env: {CONF: debug,   ARCH: x86_64,  CXX11: OFF, CXX17: ON,  MEMBERSMAP: OFF, CCACHE_CPP2: yes}
            compiler: clang
          # - env: {CONF: debug,   ARCH: aarch64, CXX11: OFF, CXX17: ON,  MEMBERSMAP: OFF, CCACHE_CPP2: yes}
          #   compiler: clang
    env: ${{ matrix.env }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Get Data
        id: get-date
        run: |
         echo "date=$(/bin/date -u "+%Y-%m-%d-%H:%M:%S")" >> ${GITHUB_OUTPUT}
      - name: Cache ccache
        uses: actions/cache@v3
        with:
          path: |
            ~/.ccache
          key: ${{ runner.os }}-ccache-${{ matrix.compiler }}-${{ matrix.env }}-${{ steps.get-date.outputs.date }}
          restore-keys: |
            ${{ runner.os }}-ccache-${{ matrix.compiler }}-${{ matrix.env }}-
            ${{ runner.os }}-ccache-${{ matrix.compiler }}-
            ${{ runner.os }}-ccache-
      - name: Install Deps
        run: |
          sudo apt-get install -y -q ccache valgrind
      - name: CCache stats
        run: |
          ccache -s
      - name: Create build folder
        run: |
          mkdir build
      - name: Setting CXXFLAGS
        run: |
          if [ "$CXX" = "clang++" ]
          then
            echo "CXXFLAGS=\"-stdlib=libc++ ${CXXFLAGS}\"" >> ${GITHUB_ENV}
          fi
      - name: CMake
        run: |
          cd build
          eval "ARCH_FLAGS=\${ARCH_FLAGS_${ARCH}}" ;
          cmake \
          -DRAPIDJSON_HAS_STDSTRING=ON \
          -DRAPIDJSON_USE_MEMBERSMAP=${MEMBERSMAP} \
          -DRAPIDJSON_BUILD_CXX11=${CXX11} \
          -DRAPIDJSON_BUILD_CXX17=${CXX17} \
          -DCMAKE_VERBOSE_MAKEFILE=ON \
          -DCMAKE_BUILD_TYPE=${CONF} \
          -DCMAKE_CXX_FLAGS="${ARCH_FLAGS} ${GCOV_FLAGS} ${CXX_FLAGS}" \
          -DCMAKE_EXE_LINKER_FLAGS=${GCOV_FLAGS} \
          ..
      - name: Make tests
        run: |
          cd build
          make tests
      - name: Make examples
        run: |
          cd build
          make examples
      - name: Test
        run: |
          cd build
          TEST_ARG=
          [[ "$CONF" == "release" ]] || TEST_ARG="-E perftest"
          ctest -j 2 -V ${TEST_ARG}
